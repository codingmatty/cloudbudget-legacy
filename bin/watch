#!/usr/bin/env node
/* global __dirname, process */

var debug = require('debug')('watcher');
var watch = require('watch');
var config = require("../config/config.json");
var exec = require('child_process').exec;

var buildExecCallback = function (buildType) {
  return function (error, stdout, stderr) {
    debug(buildType + ' stdout: ' + stdout);
    debug(buildType + ' stderr: ' + stderr);
    if (error !== null) {
      debug(buildType + ' exec error: ' + error);
    }
  };
};

var buildScriptsExecChild = watch.createMonitor(__dirname + '/../source/js/', function (monitor) {
  var onCb = function() { exec('npm run build:scripts', buildExecCallback('build:scripts')); }
  monitor.on("created", onCb);
  monitor.on("changed", onCb);
  monitor.on("removed", onCb);
});

var buildStylesExecChild = watch.createMonitor(__dirname + '/../source/scss/', function (monitor) {
  var onCb = function() { exec('npm run build:styles', buildExecCallback('build:styles')); }
  monitor.on("created", onCb);
  monitor.on("changed", onCb);
  monitor.on("removed", onCb);
});

var buildMarkupExecChild = watch.createMonitor(__dirname + '/../source/html/', function (monitor) {
  var onCb = function() { exec('npm run build:markup', buildExecCallback('build:markup')); }
  monitor.on("created", onCb);
  monitor.on("changed", onCb);
  monitor.on("removed", onCb);
});